{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "Deploy Lambda Function to attach Force MFA policy to the user who had not enabled Physical/Virtual MFA.",
  "Parameters" : {
    "SlackWebhookParameter" : {
      "Type" : "String",
      "Default" : "",
      "Description" : "Webhook for Slack Channel"
    },
    "SlackChannelName" : {
        "Type" : "String",
        "Default" : "",
        "Description" : "Name of the slack channel where you want alerts"
      },
      "WhitelistTag" : {
        "Type" : "String",
        "Default" : "userType:Service",
        "Description" : "List of tags that will be whitelisted."
      },
      "S3Bucket" : {
          "Type" : "String",
          "Default" : "",
          "Description" : "Name of the S3 bucket where the lambda is stored"
      },
      "S3Key" : {
          "Type" : "String",
          "Default" : "",
          "Description" : "Key name of the S3 object"
      },
      "LambdaHandler" : {
          "Type" : "String",
          "Default" : "",
          "Description" : "Lambda Handler name E.g: <file_name>.lambda_handler"
      }
    },
  "Resources": {
    "EnforceMFALambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "enforceMFA",
        "Tags": [
          {
            "Key": "CreatedBy",
            "Value": "Security Team"
          }
        ],
        "Handler": { "Ref": "LambdaHandler" },
        "Environment" : {
            "Variables": { 
            "WEBHOOK_URL": { "Ref": "SlackWebhookParameter" }, 
            "SLACK_CHANNEL_NAME": { "Ref": "SlackChannelName" },
            "WHITELIST_TAG": { "Ref": "WhitelistTag" }
        }
        },
        "Role": {
          "Fn::GetAtt": [
            "mfaEnforceLambdaRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": { "Ref": "S3Key" }
        },
        "Runtime": "python3.7",
        "Timeout": 900
      }
    },
    "mfaEnforceLambdaRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "RoleName": "mfaEnforceLambdaRole",
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "Service": [ "lambda.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }]
          },
          "Path": "/",
          "Policies": [{
            "PolicyName": "EnforceMFALambdaPolicy",
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "iam:CreatePolicy",
                                        "iam:ListPolicies",
                                        "iam:ListAttachedUserPolicies",
                                        "iam:AttachUserPolicy",
                                        "iam:ListAccountAliases",
                                        "iam:ListUsers",
                                        "iam:ListUserPolicies",
                                        "iam:ListMFADevices",
                                        "iam:ListVirtualMFADevices",
                                        "iam:GetLoginProfile",
                                        "iam:ListUserTags",
                                        "iam:GetAccountSummary",
                                        "iam:GetPolicy",
                                        "iam:GetUser",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:CreateLogGroup"
                        ],
                        "Resource": "*"
                    }
                ]
            }
          }]
        }
      },
      "ScheduledRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
          "Description": "Rule to trigger EnforceMFA Lambda",
          "Name" : "enforeMFALambdaRule",
          "ScheduleExpression": "cron(0 12 * * ? *)",
          "State": "ENABLED",
          "Targets": [{
            "Arn": { "Fn::GetAtt": ["EnforceMFALambda", "Arn"] },
            "Id": "TargetFunctionV1"
          }]
        }
      },
      "PermissionForEventsToInvokeLambda": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": { "Ref": "EnforceMFALambda" },
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": { "Fn::GetAtt": ["ScheduledRule", "Arn"] }
        }
      }
  }
}